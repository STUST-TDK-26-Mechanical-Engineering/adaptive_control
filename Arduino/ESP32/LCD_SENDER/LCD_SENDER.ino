/*
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/esp-now-esp32-arduino-ide/
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*/

#include <esp_now.h>
#include <WiFi.h>

// REPLACE WITH YOUR RECEIVER MAC Address
uint8_t broadcastAddress[] = {0x7C, 0x9E, 0xBD, 0x66, 0x53, 0x00};
 unsigned char PROGMEM img[] =
{ 
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X80,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0XFE,0X00,0X00,0X80,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X60,0X70,0X00,0XC0,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0XF0,0XFF,0X00,0X70,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0XE0,0X23,0XE4,0X00,0X3C,0X80,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X60,0X22,0X16,0X00,0X60,0X8F,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X30,0X24,0X00,0X00,0XF8,0X83,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X20,0X02,0XC0,0X27,0X80,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X23,0X06,0X00,0XE0,0X87,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X01,0X02,0X00,0X7E,0XC6,0X1F,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0XF8,0X07,0X00,0X66,0XFE,0X18,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X80,0X03,0X00,0X00,0X7C,0XC2,0X18,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0XE1,0X03,0X00,0X64,0X42,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X1F,0X00,0X00,0XF4,0X43,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X01,0X1F,0X00,0X38,0X60,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X80,0XFF,0X08,0X00,0X60,0X20,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X80,0X06,0X18,0X00,0XF0,0X30,0X0C,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X80,0X84,0X08,0X00,0X20,0X10,0X0C,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X40,0X04,0X03,0X00,0X60,0X1F,0X04,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X20,0X04,0X06,0X00,0X7F,0X08,0X06,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X04,0X1C,0X00,0X0F,0X04,0X07,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X1E,0XF8,0X00,0X00,0X80,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X0E,0XF0,0X00,0X00,0X00,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X30,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X70,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X60,0X1E,0X00,0X00,0X60,0X00,0X00,0X20,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0XC0,0X3F,0X70,0X00,0X60,0X20,0X00,0X00,0X60,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0XE0,0X00,0X70,0X00,0X7F,0X70,0X00,0X00,0X40,0X7C,0X00,0X00,0X00,0X00,0X00,0X00,
0X60,0XFE,0X03,0X80,0X13,0XB0,0X00,0X80,0X7F,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,
0X20,0X32,0X06,0X00,0X73,0X98,0X01,0X80,0X01,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0XF2,0XFF,0X01,0X3E,0X08,0X03,0XC0,0X00,0X10,0X00,0X00,0X00,0X00,0X00,0X00,
0XFC,0X37,0X03,0X00,0X12,0X04,0X06,0X40,0X00,0X03,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X11,0X01,0X00,0X7B,0XC6,0X1C,0X40,0XFC,0X03,0X00,0X00,0X00,0X00,0X00,0X00,
0X80,0XFF,0X01,0X00,0X13,0X3A,0X78,0X00,0X30,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X13,0X00,0X04,0X00,0X30,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0XF0,0X03,0X80,0XFB,0XF8,0X07,0X00,0X18,0X06,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X03,0X03,0X00,0XC3,0XF2,0X06,0X00,0XCC,0X0F,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0XFB,0X03,0X00,0XD0,0X92,0X06,0X00,0X7E,0X0C,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X02,0X01,0X80,0XFC,0X9E,0X03,0X00,0X62,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0XFF,0X01,0X40,0XCA,0X0C,0X03,0X00,0X60,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X03,0X03,0X60,0XC0,0X08,0X01,0X00,0XC0,0X07,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0XFF,0X03,0X20,0X40,0X8C,0X01,0X00,0XFC,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X07,0X01,0X00,0X40,0X9C,0X0E,0X00,0X40,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X0E,0X00,0X00,0X70,0X52,0X1C,0X00,0X40,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X06,0X03,0X00,0X30,0X00,0X18,0X00,0XE0,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X01,0X06,0X00,0X00,0X00,0X00,0XC0,0X7F,0X00,0X00,0X00,0X00,0X00,0X00,0X00, };
// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
  short int c;
  unsigned char PROGMEM a[128];

} struct_message;

// Create a struct_message called myData
struct_message myData;

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
 
void setup() {
  // Init Serial Monitor
  Serial.begin(115200);
 myData.c =0;
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
}
void loop() {
  // Set values to send
  for(int i =0; i<128;i++){
  myData.a[i]= img[myData.c*i];
  }
  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
  if (result == ESP_OK) {
     myData.c = myData.c+1;
    Serial.println("Sent with success");
  }
  if(myData.c >=8){
    myData.c=0;
  }
  delay(1000);
}
